/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var parcel = ee.FeatureCollection("users/ashfakmahmud20/MZ");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Change the offset by 1000
// To export 387 parcels at a time
var parcel = ee.FeatureCollection(parcel.toList({count:387, offset:0}))
// Date
var start_date='2017-01-01';
var end_date='2021-12-31';  

// Get the number of parcels.
var count_parcel = parcel.size();
print('The number of parcel in a specific area : ', count_parcel);
print(parcel)


//visualize the fields
var sugercane = ee.Image().byte().paint({
 featureCollection: parcel,
  color: 2,
  width: 1
});

Map.addLayer(sugercane, {palette: ['red']}, 'Parcel');
Map.centerObject(parcel, 8);



var S1 = ee.ImageCollection('COPERNICUS/S1_GRD')
    .filterBounds(parcel)
    .filterDate(start_date, end_date)
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
    .filter(ee.Filter.eq('instrumentMode', 'IW'))
    .filter(ee.Filter.eq('resolution_meters', 10))
    //.filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'));
    

//linear is LN = 10^(db/10)
var linear = S1.map(function (image) {
  var VV_linear = image.expression(' pow(10,(VV/10))',{
  'VV' : image.select('VV')
}).rename('VV_linear')
  var VH_linear = image.expression(' pow(10,(VH/10))',{
  'VH' : image.select('VH')
}).rename('VH_linear')
var ratio = VV_linear.divide(VH_linear).rename(['ratio']);
var ratio_db = image.expression(' VV/VH',{
  'VV' : image.select('VV'),
  'VH' : image.select('VH')
}).rename(['ratio_db']);

  return image.addBands(VV_linear).addBands(VH_linear).addBands(ratio).addBands(ratio_db);
})




//RVI
var S1 = linear.map(function (image) {
  var RVI = image.expression(' (4*VHlin)/(VVlin+VHlin)',{
  'VVlin' : image.select('VV_linear'),
  'VHlin' : image.select('VH_linear')
}).rename('RVI')

  var RVI_db = image.expression(' (4*VH)/(VV+VH)',{
  'VV' : image.select('VV'),
  'VH' : image.select('VH')
}).rename('RVI_db')
  return image.addBands(RVI).addBands(RVI_db);
})

print(S1)


var triplets = S1.map(function(image) {
  return image.select('RVI').reduceRegions({
    collection: parcel.select(['Field_Name']), 
    reducer: ee.Reducer.mean().setOutputs(['RVI']), 
    scale: 10,
  })// reduceRegion doesn't return any output if the image doesn't intersect
    // with the point or if the image is masked out due to cloud
    // If there was no cr value found, we set the cr to a NoData value -9999
    .map(function(feature) {
    var rvi = ee.List([feature.get('RVI'), -9999])
      .reduce(ee.Reducer.firstNonNull())
    return feature.set({'RVI': rvi, 'imageID': ee.String(image.id()).slice(17,25)})
    })
  }).flatten();
  
print(triplets.first())

var format = function(table, rowId, colId) {
  var rows = table.distinct(rowId); 
  var joined = ee.Join.saveAll('matches').apply({
    primary: rows, 
    secondary: table, 
    condition: ee.Filter.equals({
      leftField: rowId, 
      rightField: rowId
    })
  });
        
  return joined.map(function(row) {
      var values = ee.List(row.get('matches'))
        .map(function(feature) {
          feature = ee.Feature(feature);
          return [feature.get(colId), feature.get('RVI')];
        });
      return row.select([rowId]).set(ee.Dictionary(values.flatten()));
    });
};

var sentinelResults = format(triplets, 'Field_Name', 'imageID');



// Create empty dictionary for each day of the year
//for four years it is about 1600 days

var keys = ee.List.sequence(0, 1999).map(function(day) {
  var date = ee.Date.fromYMD(2017, 1, 1).advance(day, 'day')
  return date.format('YYYYMMdd')
})
var values = ee.List.repeat(-9999, 2000)
var emptyDict = ee.Dictionary.fromLists(keys, values)
print(emptyDict)

var sentinelResults = sentinelResults.map(function(f){
  var properties = f.toDictionary()
  return f.set(emptyDict.combine(properties))
})


Export.table.toDrive({
    collection: sentinelResults,
    description: 'RVI',
    folder: 'GEE output',
    fileNamePrefix: 'RVI',
    fileFormat: 'CSV'
})
