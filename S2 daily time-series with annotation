/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var parcel = ee.FeatureCollection("users/ashfakmahmud20/Waterlogged_SZ");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// remove the existing parcel and replace with your shapefile. 
//Do not forget to rename it to "parcel" (without ""). click on your shapefile name.
//then click on FEATURES and then click on Feature Index tab. check the name 
//of the 2nd column. Here I used "id". Now go to lines where I have 
//indicated to change the name of the column. Then run the code. 
// After running the code, go to Tasks tab here --->>>>>>>>>>>>>>>>>>>>
// (Tasks tab is situated near Inspector and console tab). Then click on
// RUN button under unsubmitted tasks which is your NDVI. It may take some 
//time. Wait and check if you see a tick button showing the NDVI CSV 
// has been uploaded to your drive. You can find the CSV in your drive
// inside a new folder name Chunk21. 


// adjust Date
  var start_date='2020-01-01';
  var end_date='2020-12-31';  

  // Cloud score
  // remove cloudy image
  var max_cloud_percent= 95;
  var sort_ascending = false;

  // Parameters for sentinel cloud score
  var cloudThresh = 20; //Ranges from 1-100. Lower value will mask more pixels out. Generally 10-30 works well with 20 being used most commonly 
  var cloudHeights = ee.List.sequence(200,10000,500); //Height of clouds is use to project cloud shadows
  var irSumThresh = 0.35; //Sum of IR bands to include as shadows within TDOM and the shadow shift method (lower number masks out less)
  var dilatePixels = 5; //Pixels to dilate around clouds
  var contractPixels = 1; //Pixels to reduce cloud mask and dark shadows by to reduce inclusion of single-pixel comission errors

  var rescale = function(img, exp, thresholds) {
      return img.expression(exp, {img: img})
          .subtract(thresholds[0]).divide(thresholds[1] - thresholds[0]);
    };

  function sentinelCloudScore(img) {
  

    // Compute several indicators of cloudyness and take the minimum of them.
    var score = ee.Image(1);
  
    // Clouds are reasonably bright in the blue and cirrus bands.
    score = score.min(rescale(img, 'img.blue', [0.1, 0.5]));
    score = score.min(rescale(img, 'img.cb', [0.1, 0.3]));
    score = score.min(rescale(img, 'img.cb + img.cirrus', [0.15, 0.2]));
  
    // Clouds are reasonably bright in all visible bands.
    score = score.min(rescale(img, 'img.red + img.green + img.blue', [0.2, 0.8]));

  
    //Clouds are moist
    var ndmi = img.normalizedDifference(['nir','swir1']);
    score = score.min(rescale(ndmi, 'img', [-0.1, 0.1]));
  
    score = score.multiply(100).byte();
 
    return img.addBands(score.rename('cloudScore'));
  }

  function projectShadows(cloudMask,image,cloudHeights){
    var meanAzimuth = image.get('MEAN_SOLAR_AZIMUTH_ANGLE');
    var meanZenith = image.get('MEAN_SOLAR_ZENITH_ANGLE');

  // Shadow mask 
  // Find dark pixels
    var darkPixels = image.select(['nir','swir1','swir2']).reduce(ee.Reducer.sum()).lt(irSumThresh)
      .focal_min(contractPixels).focal_max(dilatePixels)
    ;//.gte(1);
  
    
    //Get scale of image
    var nominalScale = cloudMask.projection().nominalScale();

    //Find where cloud shadows should be based on solar geometry
    //Convert to radians , compute the sin of the cloud shadows.
    var azR =ee.Number(meanAzimuth).multiply(Math.PI).divide(180.0).add(ee.Number(0.5).multiply(Math.PI ));
    var zenR  =ee.Number(0.5).multiply(Math.PI ).subtract(ee.Number(meanZenith).multiply(Math.PI).divide(180.0));
  
    //Find the shadows
    var shadows = cloudHeights.map(function(cloudHeight){
      cloudHeight = ee.Number(cloudHeight);
    
      var shadowCastedDistance = zenR.tan().multiply(cloudHeight);//Distance shadow is cast
      var x = azR.cos().multiply(shadowCastedDistance).divide(nominalScale).round();//X distance of shadow
      var y = azR.sin().multiply(shadowCastedDistance).divide(nominalScale).round();//Y distance of shadow
      return cloudMask.changeProj(cloudMask.projection(), cloudMask.projection().translate(x, y));
    });

    var shadowMask = ee.ImageCollection.fromImages(shadows).max();
 
    //Create shadow mask
    shadowMask = shadowMask.and(cloudMask.not());
    shadowMask = shadowMask.and(darkPixels);
  
    var cloudShadowMask = shadowMask.or(cloudMask);
  
    image = image.updateMask(cloudShadowMask.not()).addBands(shadowMask.rename(['cloudShadowMask']));
    return image;
  }

  //Function for wrapping the entire process to be applied across collection
  function wrapIt(img){
    img = sentinelCloudScore(img);
    var cloudMask = img.select(['cloudScore']).gt(cloudThresh)
      .focal_min(contractPixels).focal_max(dilatePixels)

    img = projectShadows(cloudMask,img,cloudHeights);
  
    return img;
  }

  // ADD AN "NDVI" BAND
  function addNDVI (img) {
    var ndvi = img.expression(
      '(NIR - RED) / (NIR + RED)', {
          'NIR': img.select('nir'),
          'RED': img.select('red')});
    return img.addBands(ndvi.float().rename('NDVI'));
  }

  //Function to add date
  var addDate = function(img){
     var date = img.date().format('YYYYMMdd');
     return img.set('date', ee.Number.parse(date));
  };


  var s2 = ee.ImageCollection('COPERNICUS/S2').filterDate(start_date,end_date)  //
                   .filterMetadata('CLOUDY_PIXEL_PERCENTAGE',"less_than",max_cloud_percent)
                   .filterBounds(parcel)
                   .sort('system:time_start')
  var s2 = s2.map(addDate);

  var S2_noCloud = s2.map(function(img){
      var t = img.select([ 'B1','B2','B3','B4','B5','B6','B7','B8','B8A', 'B9','B10', 'B11','B12']).divide(10000);//Rescale to 0-1
      t = t.addBands(img.select(['QA60']));
      var out = t.copyProperties(img).copyProperties(img,['system:time_start']);
         return out;
            })
      .select(['QA60', 'B1','B2','B3','B4','B5','B6','B7','B8','B8A', 'B9','B10', 'B11','B12']
      ,['QA60','cb', 'blue', 'green', 'red', 're1','re2','re3','nir', 'nir2', 'waterVapor', 'cirrus','swir1', 'swir2'])
       .map(wrapIt);

  var S2_noCloud = S2_noCloud.map(addNDVI);

  //print(S2_noCloud)

  var triplets = S2_noCloud.map(function(image) {
    return image.select('NDVI').reduceRegions({
      collection: parcel.select(['id']),  // change the column name here
      reducer: ee.Reducer.mean().setOutputs(['NDVI']), 
      scale: 10,
    })
      .map(function(feature) {
      var ndvi = ee.List([feature.get('NDVI'), -9999])
        .reduce(ee.Reducer.firstNonNull())
      return feature.set({'NDVI': ndvi, 'imageID': image.id()}).setGeometry(null)
      })
    }).flatten();
  
  //print(triplets.first())

  var format = function(table, rowId, colId) {
    var rows = table.distinct(rowId); 
    var joined = ee.Join.saveAll('matches').apply({
      primary: rows, 
      secondary: table, 
      condition: ee.Filter.equals({
        leftField: rowId, 
        rightField: rowId
      })
    });
        
    return joined.map(function(row) {
        var values = ee.List(row.get('matches'))
          .map(function(feature) {
            feature = ee.Feature(feature);
            return [feature.get(colId), feature.get('NDVI')];
          });
        return row.select([rowId]).set(ee.Dictionary(values.flatten()));
      });
  };

  var sentinelResults = format(triplets, 'id', 'imageID'); // change the column name here

  //print(sentinelResults.first())
  // Getting the highest values from multiple tiles (As S2 has different tiling systems)

  var merge = function(table, rowId) {
    return table.map(function(feature) {
      var id = feature.get(rowId)
      var allKeys = feature.toDictionary().keys().remove(rowId)
      var substrKeys = ee.List(allKeys.map(function(val) { 
          return ee.String(val).slice(0,8)}
          ))
      var uniqueKeys = substrKeys.distinct()
      var pairs = uniqueKeys.map(function(key) {
        var matches = feature.toDictionary().select(allKeys.filter(ee.Filter.stringContains('item', key))).values()
        var val = matches.reduce(ee.Reducer.max())
        return [key, val]
      })
      return feature.select([rowId]).set(ee.Dictionary(pairs.flatten()))
    })
  }
  var sentinelMerged = merge(sentinelResults, 'id'); // change the column name here
  //print(sentinelMerged.first())
  // Create empty dictionary for each day of the year
  var keys = ee.List.sequence(0, 364).map(function(day) {
    var date = ee.Date.fromYMD(2020, 9, 1).advance(day, 'day')
    return date.format('YYYYMMdd')
  })
  var values = ee.List.repeat(-9999, 365)
  var emptyDict = ee.Dictionary.fromLists(keys, values)
  //print(emptyDict)

  var sentinelMerged = sentinelMerged.map(function(f){
    var properties = f.toDictionary()
    return f.set(emptyDict.combine(properties))
  })
  
  
  Export.table.toDrive({
      collection: sentinelMerged,
      description: 'NDVI',
      folder: 'chunk21',
      fileNamePrefix: 'NDVI',
      fileFormat: 'CSV',
      //selectors: selectorList.getInfo()
  })






